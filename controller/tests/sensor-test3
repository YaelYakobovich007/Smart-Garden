import serial
import time

class ManualModbusSensor:
    def __init__(self, port='/dev/ttyUSB0', baudrate=9600, slave_addr=0x01, timeout=1):
        self.port = port
        self.baudrate = baudrate
        self.slave_addr = slave_addr
        self.timeout = timeout
        self.ser = None

    def crc16(self, data: bytes) -> bytes:
        crc = 0xFFFF
        for pos in data:
            crc ^= pos
            for _ in range(8):
                if crc & 0x0001:
                    crc >>= 1
                    crc ^= 0xA001
                else:
                    crc >>= 1
        return crc.to_bytes(2, byteorder='little')

    def build_request(self, start_reg=0x00, num_regs=2):
        # Modbus RTU frame: [slave address][function code][start reg][num regs][CRC]
        frame = bytearray()
        frame.append(self.slave_addr)           # Slave address
        frame.append(0x03)                      # Function code: Read Holding Registers
        frame += start_reg.to_bytes(2, 'big')
        frame += num_regs.to_bytes(2, 'big')
        crc = self.crc16(frame)
        frame += crc
        return frame

    def parse_response(self, response: bytes):
        # צפוי לקבל: [slave][func][byte count][val1][val2][crc]
        # val1 = טמפ', val2 = לחות (כל אחד 2 בייט)
        if len(response) < 9:
            raise ValueError("Incomplete response: " + response.hex())
        temp_raw = int.from_bytes(response[3:5], byteorder='big', signed=False)
        hum_raw = int.from_bytes(response[5:7], byteorder='big', signed=False)
        temperature = temp_raw / 10.0     # דוגמה: 231 → 23.1°C
        humidity = hum_raw / 10.0        # דוגמה: 502 → 50.2%
        return temperature, humidity

    def connect(self):
        self.ser = serial.Serial(self.port, self.baudrate, timeout=self.timeout)

    def close(self):
        if self.ser:
            self.ser.close()
            self.ser = None

    def read_sensor(self):
        self.connect()
        try:
            request = self.build_request(start_reg=0x00, num_regs=2)
            print(f"Sending request: {request.hex()}")
            self.ser.write(request)
            time.sleep(0.1)
            response = self.ser.read(9)  # 9 bytes expected
            print(f"Raw response: {response.hex()}")
            if len(response) == 9:
                try:
                    temp, hum = self.parse_response(response)
                    print(f"Temperature: {temp} °C")
                    print(f"Humidity: {hum} %")
                    return temp, hum
                except Exception as e:
                    print("Error parsing response:", e)
            else:
                print("No response or timeout (or response too short)")
        finally:
            self.close()

    def check_sensor(self):
        print(f"\n--- Checking Modbus sensor at {self.port}, baudrate {self.baudrate}, slave {self.slave_addr} ---")
        self.read_sensor()


# דוגמה לשימוש במחלקה:
if __name__ == "__main__":
    # אפשר להחליף את הערכים לפי הצורך:
    sensor = ManualModbusSensor(port="/dev/ttyUSB0", baudrate=9600, slave_addr=1)
    sensor.check_sensor()
